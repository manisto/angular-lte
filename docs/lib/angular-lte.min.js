(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(factory());
}(this, (function () { 'use strict';

function __extends(d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var BoxController = /** @class */ (function () {
    function BoxController() {
        this.fullWidth = false;
        this.type = "default";
        this.header = "";
        this.loading = false;
        this.solid = false;
        this.skipHeaderBorder = false;
        this.collapsable = false;
        this.collapsed = false;
        this.removable = false;
    }
    BoxController.prototype.$onChanges = function (changes) {
        if (changes["type"]) {
            this.type = this.type || "default";
        }
    };
    BoxController.prototype.setToolbarElement = function (toolbarElement) {
        this.toolbarElement = toolbarElement;
    };
    BoxController.prototype.setHeaderElement = function (headerElement) {
        this.headerElement = headerElement;
    };
    BoxController.prototype.setFooterElement = function (footerElement) {
        this.footerElement = footerElement;
    };
    BoxController.prototype.toggleCollapsed = function () {
        this.collapsed = !this.collapsed;
        this.onToggleCollapsed({
            $event: {
                collapsed: this.collapsed
            }
        });
    };
    BoxController.prototype.remove = function () {
        this.removed = true;
        this.onRemoved();
    };
    BoxController.$inject = [];
    return BoxController;
}());
var BoxComponent = {
    bindings: {
        fullWidth: "<",
        type: "@",
        header: "@",
        loading: "<",
        solid: "<",
        skipHeaderBorder: "<",
        collapsable: "<",
        collapsed: "<",
        onToggleCollapsed: "&",
        removable: "<",
        onRemoved: "&"
    },
    transclude: true,
    templateUrl: "angular-lte/box/BoxComponent.html",
    controller: BoxController
};

var BoxHeaderDirective = function () {
    var directive = {
        transclude: "element",
        require: "^^lteBox",
        link: function ($scope, $element, $attributes, boxController, $transclude) {
            boxController.setHeaderElement($transclude($scope, angular.noop));
        }
    };
    return directive;
};

var BoxHeaderContainerDirective = function () {
    var directive = {
        require: "^^lteBox",
        link: function ($scope, $element, $attribute, boxController) {
            $scope.$watch(function () { return boxController.headerElement; }, function (headerElement) {
                if (!headerElement) {
                    return;
                }
                $element.empty();
                $element.append(headerElement);
            });
        }
    };
    return directive;
};

var BoxToolbarDirective = function () {
    var directive = {
        transclude: "element",
        require: "^^lteBox",
        link: function ($scope, $element, $attributes, boxController, $transclude) {
            boxController.setToolbarElement($transclude($scope, angular.noop));
        }
    };
    return directive;
};

var BoxToolbarContainerDirective = function () {
    var directive = {
        require: "^^lteBox",
        link: function ($scope, $element, $attribute, boxController) {
            $scope.$watch(function () { return boxController.toolbarElement; }, function (toolbarElement) {
                if (!toolbarElement) {
                    return;
                }
                $element.empty();
                $element.append(toolbarElement);
            });
        }
    };
    return directive;
};

var BoxFooterDirective = function () {
    var directive = {
        transclude: "element",
        require: "^^lteBox",
        link: function ($scope, $element, $attributes, boxController, $transclude) {
            boxController.setFooterElement($transclude($scope, angular.noop));
            $scope.$on("$destroy", function () {
                boxController.setFooterElement(null);
            });
        }
    };
    return directive;
};

var BoxFooterContainerDirective = function () {
    var directive = {
        require: "^^lteBox",
        link: function ($scope, $element, $attribute, boxController) {
            $scope.$watch(function () { return boxController.footerElement; }, function (footerElement) {
                $element.empty();
                if (!footerElement) {
                    return;
                }
                $element.append(footerElement);
            });
        }
    };
    return directive;
};

var boxModule = angular.module("angular-lte.box", []);
boxModule.component("lteBox", BoxComponent);
boxModule.directive("lteBoxHeader", BoxHeaderDirective);
boxModule.directive("lteBoxHeaderContainer", BoxHeaderContainerDirective);
boxModule.directive("lteBoxToolbar", BoxToolbarDirective);
boxModule.directive("lteBoxToolbarContainer", BoxToolbarContainerDirective);
boxModule.directive("lteBoxFooter", BoxFooterDirective);
boxModule.directive("lteBoxFooterContainer", BoxFooterContainerDirective);

var ACTIVE_CLASS = "active";
var TreeviewController = /** @class */ (function () {
    function TreeviewController($element) {
        this.expanded = false;
        this.childTreeviews = [];
        this.$element = $element;
    }
    TreeviewController.prototype.setMenu = function (menu) {
        this.menu = menu;
    };
    TreeviewController.prototype.$onInit = function () {
        if (this.parentTreeview) {
            this.parentTreeview.attachTreeview(this);
        }
    };
    TreeviewController.prototype.$onChanges = function (changes) {
        if (changes.active) {
            var activeChange = changes.active;
            if (activeChange.isFirstChange()) {
                this.setState(!!activeChange.currentValue);
                return;
            }
            if (activeChange.currentValue) {
                this.expand();
            }
            else {
                this.collapse();
            }
        }
    };
    TreeviewController.prototype.titleClicked = function () {
        if (this.expanded && this.menu) {
            this.collapse();
        }
        else {
            this.expand();
        }
    };
    TreeviewController.prototype.expand = function () {
        var _this = this;
        if (this.expanded) {
            return;
        }
        if (this.parentTreeview) {
            this.parentTreeview.collapseAllBut(this);
        }
        if (!this.menu) {
            this.setState(true);
            return;
        }
        this.menu.expand().then(function () {
            _this.setState(true);
        });
    };
    TreeviewController.prototype.collapse = function () {
        var _this = this;
        if (!this.expanded) {
            return;
        }
        if (!this.menu) {
            this.setState(false);
            return;
        }
        this.menu.collapse().then(function () {
            _this.setState(false);
        });
    };
    TreeviewController.prototype.setState = function (expanded) {
        this.expanded = expanded;
        this.$element.toggleClass(ACTIVE_CLASS, expanded);
    };
    TreeviewController.prototype.attachTreeview = function (treeview) {
        this.childTreeviews.push(treeview);
    };
    TreeviewController.prototype.collapseAllBut = function (treeview) {
        this.childTreeviews.forEach(function (currentChild) {
            if (treeview === currentChild) {
                return;
            }
            currentChild.collapse();
        });
    };
    TreeviewController.$inject = ["$element"];
    return TreeviewController;
}());
var TreeviewDirective = function () {
    var directive = {
        restrict: "A",
        scope: {},
        require: {
            body: "^^lteBody",
            parentTreeview: "?^^lteTreeview"
        },
        controller: TreeviewController,
        bindToController: {
            active: "<"
        }
    };
    return directive;
};
TreeviewDirective.$inject = [];

var TreeviewTitleController = /** @class */ (function () {
    function TreeviewTitleController() {
    }
    return TreeviewTitleController;
}());
var TreeviewTitleDirective = function () {
    var directive = {
        restrict: "A",
        scope: {},
        transclude: true,
        templateUrl: "angular-lte/treeview/treeview-title.html",
        controller: TreeviewTitleController,
        controllerAs: "$ctrl",
        bindToController: {
            icon: "@",
            header: "@"
        },
        require: "^^lteTreeview",
        link: function (scope, element, attrs, treeviewController) {
            if (!element.attr("href")) {
                element.attr("href", "");
            }
            function titleClicked(event) {
                scope.$apply(function () {
                    treeviewController.titleClicked();
                });
            }
            element.on("click", titleClicked);
            scope.$on("$destroy", function () {
                element.off("click", titleClicked);
            });
        }
    };
    return directive;
};
TreeviewTitleDirective.$inject = [];

var duration = 0.4;
var CollapseController = /** @class */ (function () {
    function CollapseController($element, $animateCss) {
        this.$element = $element;
        this.$animateCss = $animateCss;
    }
    CollapseController.prototype.$onChanges = function (changes) {
        var collapsedChange = changes["collapsed"];
        if (!collapsedChange || collapsedChange.isFirstChange()) {
            return;
        }
        if (collapsedChange.currentValue) {
            this.collapse();
        }
        else {
            this.expand();
        }
    };
    CollapseController.prototype.startAnimation = function () {
        this.$element.css({
            display: "block",
            overflow: "hidden"
        });
    };
    CollapseController.prototype.endAnimation = function (expand) {
        this.$element.css({
            display: expand ? "block" : "none",
            overflow: "",
            height: "",
            paddingTop: "",
            paddingBottom: ""
        });
    };
    CollapseController.prototype.expand = function () {
        return this.animateHeight(true);
    };
    CollapseController.prototype.collapse = function () {
        return this.animateHeight(false);
    };
    CollapseController.prototype.animateHeight = function (expand) {
        var _this = this;
        this.startAnimation();
        var style = window.getComputedStyle(this.$element[0]);
        var collapsedSettings = {
            height: "0",
            paddingTop: "0",
            paddingBottom: "0"
        };
        var expandedSettings = {
            height: style.height,
            paddingTop: style.paddingTop,
            paddingBottom: style.paddingBottom
        };
        var from = expand ? collapsedSettings : expandedSettings;
        var to = expand ? expandedSettings : collapsedSettings;
        return this.$animateCss(this.$element, {
            duration: duration,
            easing: "ease",
            from: from,
            to: to
        })
            .start()
            .finally(function () {
            _this.endAnimation(expand);
        });
    };
    CollapseController.$inject = ["$element", "$animateCss"];
    return CollapseController;
}());
var CollapseDirective = function () {
    var directive = {
        scope: {},
        bindToController: {
            collapsed: "<lteCollapse"
        },
        controller: CollapseController
    };
    return directive;
};

var TreeviewMenuController = /** @class */ (function (_super) {
    __extends(TreeviewMenuController, _super);
    function TreeviewMenuController($element, $animateCss) {
        return _super.call(this, $element, $animateCss) || this;
    }
    TreeviewMenuController.prototype.$onInit = function () {
        this.treeview.setMenu(this);
    };
    TreeviewMenuController.$inject = ["$element", "$animateCss"];
    return TreeviewMenuController;
}(CollapseController));
var TreeviewMenuDirective = function () {
    var directive = {
        restrict: "A",
        scope: {},
        require: {
            treeview: "^^lteTreeview"
        },
        controller: TreeviewMenuController,
        bindToController: {}
    };
    return directive;
};
TreeviewMenuDirective.$inject = [];

var treeviewModule = angular.module("angular-lte.treeview", []);
treeviewModule.directive("lteTreeview", TreeviewDirective);
treeviewModule.directive("lteTreeviewTitle", TreeviewTitleDirective);
treeviewModule.directive("lteTreeviewMenu", TreeviewMenuDirective);

var sidebarCollapseClass = "sidebar-collapse";
var sidebarOpenClass = "sidebar-open";
var BodyController = /** @class */ (function () {
    function BodyController($window, $element, lteOptions) {
        this.$window = $window;
        this.$element = $element;
        this.options = lteOptions;
    }
    BodyController.prototype.$onInit = function () { };
    BodyController.prototype.toggleSidebar = function () {
        if (this.isSmall()) {
            this.$element.removeClass(sidebarCollapseClass);
            this.$element.toggleClass(sidebarOpenClass);
        }
        else {
            this.$element.removeClass(sidebarOpenClass);
            this.$element.toggleClass(sidebarCollapseClass);
        }
    };
    BodyController.prototype.isSmall = function () {
        return this.$window.innerWidth < this.options.screenSizes.sm;
    };
    BodyController.prototype.contentClicked = function () {
        if (this.isSmall()) {
            this.$element.removeClass(sidebarOpenClass);
        }
    };
    BodyController.$inject = ["$window", "$element", "lteOptions"];
    return BodyController;
}());
var BodyDirective = function () {
    var directive = {
        restrict: "A",
        controller: BodyController,
        bindToController: {}
    };
    return directive;
};

var SidebarToggleController = /** @class */ (function () {
    function SidebarToggleController() {
    }
    SidebarToggleController.prototype.$onInit = function () {
        this.screenReaderHint = this.screenReaderHint || "Toggle navigation";
    };
    SidebarToggleController.prototype.toggleSidebar = function () {
        this.body.toggleSidebar();
    };
    SidebarToggleController.$inject = [];
    return SidebarToggleController;
}());
var SidebarToggleComponent = {
    require: {
        body: "^^lteBody"
    },
    bindings: {
        screenReaderHint: "@"
    },
    templateUrl: "angular-lte/sidebar-toggle/sidebar-toggle.html",
    controller: SidebarToggleController
};

var ContentWrapperDirective = function () {
    var directive = {
        restrict: "A",
        scope: {},
        require: "^^lteBody",
        link: function ($scope, $element, attributes, body) {
            function handleClick() {
                body.contentClicked();
            }
            $element.on("click", handleClick);
            $scope.$on("$destroy", function () {
                $element.off("click", handleClick);
            });
        }
    };
    return directive;
};
ContentWrapperDirective.$inject = [];

var sidebarToggleModule = angular.module("angular-lte.sidebar-toggle", []);
sidebarToggleModule.directive("lteBody", BodyDirective);
sidebarToggleModule.component("lteSidebarToggle", SidebarToggleComponent);
sidebarToggleModule.directive("lteContentWrapper", ContentWrapperDirective);

var resizeEvent = "resize";
var WrapperDirective = function ($window) {
    var directive = {
        restrict: "A",
        scope: {},
        link: function ($scope, element, attrs) {
            var running = false;
            var window = angular.element($window);
            var wrapper = element[0];
            var mainHeader = wrapper.querySelector(".main-header");
            var mainSidebar = wrapper.querySelector(".main-sidebar");
            var contentWrapper = wrapper.querySelector(".content-wrapper");
            var mainFooter = wrapper.querySelector(".main-footer");
            var watches = [];
            watches.push(function () { return wrapper.offsetHeight; });
            watches.push(function () { return mainSidebar.offsetHeight; });
            function requestHeightAdjustment() {
                if (running) {
                    return;
                }
                running = true;
                $window.requestAnimationFrame(function () {
                    $scope.$apply(function () {
                        adjustHeight();
                        running = false;
                    });
                });
            }
            function adjustHeight() {
                var wrapperHeight = wrapper.offsetHeight;
                var sidebarHeight = mainSidebar.offsetHeight;
                var offset = mainHeader.offsetHeight + mainFooter.offsetHeight;
                if (wrapperHeight > sidebarHeight) {
                    contentWrapper.style.minHeight = wrapperHeight - offset + "px";
                }
                else {
                    contentWrapper.style.minHeight = sidebarHeight - offset + "px";
                }
            }
            $scope.$watchGroup(watches, function () {
                requestHeightAdjustment();
            });
            window.on(resizeEvent, requestHeightAdjustment);
            $scope.$on("$destroy", function () {
                window.off(resizeEvent, requestHeightAdjustment);
            });
        }
    };
    return directive;
};
WrapperDirective.$inject = ["$window"];

var wrapperModule = angular.module("angular-lte.wrapper", []);
wrapperModule.directive("lteWrapper", WrapperDirective);

var CalloutComponent = {
    bindings: {
        type: "<",
        title: "<"
    },
    transclude: true,
    templateUrl: "angular-lte/components/callout.html"
};

var InfoBoxComponent = {
    bindings: {
        type: "@",
        icon: "@",
        text: "@",
        number: "<"
    },
    templateUrl: "angular-lte/components/info-box.html"
};

var ProgressBoxComponent = {
    bindings: {
        type: "@",
        icon: "@",
        text: "@",
        number: "<",
        progress: "<",
        description: "@"
    },
    templateUrl: "angular-lte/components/progress-box.html"
};

var SmallBoxComponent = {
    bindings: {
        type: "@",
        title: "@",
        text: "@",
        icon: "@",
        lteClick: "&",
        linkText: "@"
    },
    transclude: {
        title: "?boxTitle",
        text: "?boxText"
    },
    templateUrl: "angular-lte/components/small-box.html"
};

var componentsModule = angular.module("angular-lte.components", []);
componentsModule.component("lteCallout", CalloutComponent);
componentsModule.component("lteInfoBox", InfoBoxComponent);
componentsModule.component("lteProgressBox", ProgressBoxComponent);
componentsModule.component("lteSmallBox", SmallBoxComponent);

var collapseModule = angular.module("angular-lte.collapse", []);
collapseModule.directive("lteCollapse", CollapseDirective);

var Options = {
    animationSpeed: 500,
    screenSizes: {
        xs: 480,
        sm: 768,
        md: 992,
        lg: 1200
    }
};

var angularLteModule = angular.module("angular-lte", [
    boxModule.name,
    treeviewModule.name,
    sidebarToggleModule.name,
    wrapperModule.name,
    componentsModule.name,
    collapseModule.name
]);
angularLteModule.constant("lteOptions", Options);

})));
//# sourceMappingURL=angular-lte.min.js.map
